TStringIndex(var, singleTypes) ::= <<
package $var.packageName$;

import java.util.List;
import java.util.RandomAccess;

/** Methods for finding the index of a specific character, string, or value
 * within a string
 * @author TeamworkGuy2
 * @since 2015-1-2
 */
@javax.annotation.Generated("StringTemplate")
public class $var.className$ {

	private $var.className$() { throw new AssertionError("cannot instantiate static class $var.className$"); }


$singleTypes:{type | 	/**
	 * @see #indexOf($type.type$, int, int, int)
	 */
	public static int indexOf($type.type$ str, int strOff, int matchChar) {
		return indexOf(str, strOff, str$type.getLength$ - strOff, matchChar);
	\}


	/** Search for a character in an array of characters and return the absolute index
	 * where the first instance of the character occurs, or -1 if the character does not exist in the array
	 * @param str the character array to search
	 * @param strOff the offset into the character array at which to start searching
	 * @param strLen the number of chars to compare starting at {@strOff\} in {@code str\}
	 * @param matchChar the character to search for in {@code str\}
	 * @return the index of the found matching character, from index 0, or -1 if the character could not be found
	 */
	public static int indexOf($type.type$ str, int strOff, int strLen, int matchChar) {
		int strLength = strOff + strLen;

		if(matchChar < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
			// search for the first matching character
			for(int i = strOff; i < strLength; i++) {
				if(str$type.getElement$i$type.getElementEnd$ == matchChar) {
					return i;
				\}
			\}
			return -1;
		\}
		else {
			return indexOfSupplement(str, strOff, strLength - strOff, matchChar);
		\}
	\}


	/** Search for a character in an array of characters and return the absolute index
	 * where the last instance of the character character occurs, or -1 if the character does not exist in the array
	 * @param str the character array to search
	 * @param strOff the offset into the character array at which to start searching
	 * @param strLen the number of chars to compare starting at {@strOff\} in {@code str\}
	 * @param matchChar the character to search for in {@code str\}
	 * @return the index of the found matching character, from index 0, or -1 if the character could not be found
	 */
	public static int lastIndexOf($type.type$ str, int strOff, int strLen, int matchChar) {
		int strLength = strOff + strLen;

		if(matchChar < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
			// search for the first matching character
			for(int i = strLength - 1; i >= strOff; i--) {
				if(str$type.getElement$i$type.getElementEnd$ == matchChar) {
					return i;
				\}
			\}
			return -1;
		\}
		else {
			// TODO doesn't yet support supplementary code points
			//return lastIndexOfSupplement(str, strOff, strLength - strOff, matchChar);
			throw new IllegalArgumentException("lastIndexOf supplementary code point not yet supported");
		\}
	\}


	/** Search for the index of a supplementary character in an array of characters
	 * @param str the array of characters to search
	 * @param strOff the offset into {@code str\} at which to start comparing characters
	 * @param strLen the number of chars to compare starting at {@strOff\} in {@code str\}
	 * @param matchChar the supplementary characters to search for
	 * @return the lower index within the {@code str\} array of the matching {@code matchChar\}
	 */
	private static int indexOfSupplement($type.type$ str, int strOff, int strLen, int matchChar) {
		if(Character.isValidCodePoint(matchChar)) {
			final char high = Character.highSurrogate(matchChar);
			final char low = Character.lowSurrogate(matchChar);
			final int maxI = strOff + strLen - 1;
			for(int i = strOff; i < maxI; i++) {
				if(str$type.getElement$i$type.getElementEnd$ == high && str$type.getElement$i + 1$type.getElementEnd$ == low) {
					return i;
				\}
			\}
		\}
		return -1;
	\}


}$$var.types:{t | 	/**
	 * @see #indexOf($t.t1.type$, int, int, $t.t2.type$, int, int)
	 */
	public static int indexOf($t.t1.type$ str, int strOff, $t.t2.type$ subStr) {
		return indexOf(str, strOff, str$t.t1.getLength$ - strOff, subStr, 0, subStr$t.t2.getLength$);
	\}


	/**
	 * @see #indexOf($t.t1.type$, int, int, $t.t2.type$, int, int)
	 */
	public static int indexOf($t.t1.type$ str, int strOff, $t.t2.type$ subStr, int subStrOff) {
		return indexOf(str, strOff, str$t.t1.getLength$ - strOff, subStr, subStrOff, subStr$t.t2.getLength$ - subStrOff);
	\}


	/**
	 * @see #indexOf($t.t1.type$, int, int, $t.t2.type$, int, int)
	 */
	public static int indexOf($t.t1.type$ str, int strOff, int strLen, $t.t2.type$ subStr) {
		return indexOf(str, strOff, strLen, subStr, 0, subStr$t.t2.getLength$);
	\}


	/**
	 * @see #indexOf($t.t1.type$, int, int, $t.t2.type$, int, int)
	 */
	public static int indexOf($t.t1.type$ str, int strOff, int strLen, $t.t2.type$ subStr, int subStrOff) {
		return indexOf(str, strOff, strLen, subStr, subStrOff, subStr$t.t2.getLength$ - subStrOff);
	\}


	/** Search for a sub $t.t2.type$ in a $t.t1.type$ and return the absolute index
	 * where the sub $t.t2.type$ begins, or -1 if the sub $t.t2.type$ does not exist in the main $t.t1.type$
	 * @param str the $t.t1.type$ to search
	 * @param strOff the offset into the character array at which to start searching
	 * @param strLen the number of chars to compare starting at {@strOff\} in {@code str\}
	 * @param subStr the sub $t.t2.type$ to search for in {@code str\}
	 * @param subStrOff the offset into the sub string array at which to start searching
	 * @param subStrLen the number of chars to search for starting at {@code subStrOff\} in {@code subStr\}
	 * @return the index of the found sub string, from index 0, or -1 if the sub string could not be found
	 */
	public static int indexOf($t.t1.type$ str, int strOff, int strLen, $t.t2.type$ subStr, int subStrOff, int subStrLen) {
		// if the sub string has a length of zero, return the offset into the search string, no comparison needed
		if(subStrLen == 0) { return strOff; \}

		char firstChar = subStr$t.t2.getElement$subStrOff$t.t2.getElementEnd$;
		int maxI = strOff + strLen;
		int maxK = subStrOff + subStrLen;

		for(int i = strOff; i < maxI; i++) {
			// search for the first matching character
			while(i < maxI && str$t.t1.getElement$i$t.t1.getElementEnd$ != firstChar) { i++; \}

			if(i < maxI) {
				// j and k have + 1 because the first character was already matched by the previous loop
				int j = i + 1;
				for(int k = subStrOff + 1; k < maxK && j < maxI && str$t.t1.getElement$j$t.t1.getElementEnd$ == subStr$t.t2.getElement$k$t.t2.getElementEnd$; j++, k++) {
				\}
				// if the entire substring was found
				if(j == i + subStrLen) {
					return j - subStrLen;
				\}
			\}
		\}
		return -1;
	\}


}$	/** Find the {@code n-th} occurrence of a character in a string 
	 * @see #indexOfOccurrenceN(String, int, int, int, int)
	 */
	public static int indexOfOccurrenceN(String str, int occurenceN, int matchChar) {
		return indexOfOccurrenceN(str, 0, str.length(), occurenceN, matchChar);
	}


	/** Find the {@code n-th} occurrence of a character in a substring
	 * @param str the string to search
	 * @param off the {@code str} offset
	 * @param len the number of characters to search
	 * @param occurrenceN the occurrence to find, 1 finds the first matching occurrence,
	 * {@code N} finds the n-th occurrence, 0 finds the last occurrence
	 * @param matchChar the character to search for repeatedly
	 * @return the index of the {@code n-th} occurrence of {@code matchChar} in {@code str},
	 * or -1 if the string does not contain {@code n} occurrences
	 */
	public static int indexOfOccurrenceN(String str, int off, int len, int occurrenceN, int matchChar) {
		int occurI = 0;
		int loop = 0;
		int i = off; // incremented past one more occurrence each loop

		for(int size = off + len; i < size; loop++) {
			int tmp = indexOf(str, i, len - (i - off), matchChar);
			// if return last occurrence
			if(occurrenceN == 0 && tmp == -1 && loop > 0) {
				return i - 1;
			}
			i = tmp;
			if(i == -1) {
				return -1;
			}
			else {
				occurI++;
				if(occurI == occurrenceN) {
					return i;
				}
				i += 1; // increment past the matching char
			}
		}

		// check and return last occurrence again, handles when (i + n) is greater than size and the loop ends
		if(occurrenceN == 0 && loop > 0) {
			return i - 1;
		}
		return -1;
	}


	/** Find the {@code n-th} occurrence of a substring in a string 
	 * @see #indexOfOccurrenceN(String, int, int, int, int)
	 */
	public static int indexOfOccurrenceN(String str, int occurenceN, String matchStr) {
		return indexOfOccurrenceN(str, 0, str.length(), occurenceN, matchStr, 0, matchStr.length());
	}


	/** Find the {@code n-th} occurrence of a substring in a substring
	 * @param str the string to search
	 * @param off the {@code str} offset
	 * @param len the number of characters to search
	 * @param occurrenceN the occurrence to find, 1 finds the first matching occurrence,
	 * {@code N} finds the n-th occurrence, 0 finds the last occurrence matched from the beginning.
	 * NOTE: this may not produce expected results when search for the last occurrence of repeating characters.
	 * Example: indexOfOccurrenceN("aaaaa", 0, 5, 0, "aa", 0, 2) returns 2 rather than 3
	 * @param matchStr the string to search for repeatedly
	 * @param matchStrOff the {@code matchStr} offset
	 * @param matchStrLen the number of characters to match
	 * @return the index of the {@code n-th} occurrence of {@code matchChar} in {@code str},
	 * or -1 if the string does not contain {@code n} occurrences
	 */
	public static int indexOfOccurrenceN(String str, int off, int len, int occurrenceN, String matchStr, int matchStrOff, int matchStrLen) {
		int occurI = 0;
		int loop = 0;
		int i = off; // incremented past one more occurrence each loop

		for(int size = off + len; i < size; loop++) {
			int tmp = indexOf(str, i, len - (i - off), matchStr, matchStrOff, matchStrLen);
			// if return last occurrence
			if(occurrenceN == 0 && tmp == -1 && loop > 0) {
				return i - matchStrLen;
			}
			i = tmp;
			if(i == -1) {
				return -1;
			}
			else {
				occurI++;
				if(occurI == occurrenceN) {
					return i;
				}
				i += matchStrLen; // increment past the matching string
			}
		}

		// check and return last occurrence again, handles when (i + n) is greater than size and the loop ends
		if(occurrenceN == 0 && loop > 0) {
			return i - matchStrLen;
		}
		return -1;
	}


	/** Find the index of a matching sub-string that is not proceeded by a specified prefix<br>
	 * For example, if<br>
	 * {@code str="//C style string containing a C style comment"}<br>
	 * {@code subStr="C style"}<br>
	 * {@code prefix="//"}<br>
	 * the return index would be {@code 30}, not {@code 2}, because the first
	 * instance of {@code "C style"} at index 2 is proceeded by the prefix {@code "//"}.
	 * @param str the string to search
	 * @param strOff the offset into the string at which to start searching
	 * @param subStr the sub-string to search for
	 * @param subStrOff the offset into the sub-string at which the sub-string starts,
	 * the sub-string is assumed occupy the remaining portion of the array
	 * @param prefix the prefix string
	 * @param prefixOff the offset into the prefix string at which the prefix starts,
	 * the sub-string is assumed occupy the remaining portion of the array
	 * @return the index of the start of a matching {@code subStr} within {@code str} that
	 * is not proceeded by {@code prefix}.
	 */
	public static int indexOfNotPrefixedBy(char[] str, int strOff, String subStr, int subStrOff, char[] prefix, int prefixOff) {
		int prefixLen = prefix.length - prefixOff;
		int index = indexOf(str, strOff, subStr, subStrOff);
		while(index > -1) {
			if(index-strOff >= prefixLen) {
				if(!StringCompare.equal(str, index - prefixLen, prefix, prefixOff, prefixLen)) {
					return index;
				}
			}
			else {
				return index;
			}
			index = indexOf(str, index+prefixLen, subStr, subStrOff);
		}
		return -1;
	}


	/** Find the index of a matching sub-string that is not proceeded by a specified prefix<br>
	 * For example, if<br>
	 * {@code str="//C style string containing a C style comment"}<br>
	 * {@code subStr="C style"}<br>
	 * {@code prefix="//"}<br>
	 * the return index would be {@code 30}, not {@code 2}, because the first
	 * instance of {@code "C style"} at index 2 is proceeded by the prefix {@code "//"}.
	 * @param str the string to search
	 * @param strOff the offset into the string at which to start searching
	 * @param subStr the sub-string to search for
	 * @param subStrOff the offset into the sub-string at which the sub-string starts,
	 * the sub-string is assumed occupy the remaining portion of the array
	 * @param prefix the prefix string
	 * @param prefixOff the offset into the prefix string at which the prefix starts,
	 * the sub-string is assumed occupy the remaining portion of the array
	 * @return the index of the start of a matching {@code subStr} within {@code str} that
	 * is not proceeded by {@code prefix}.
	 */
	public static int indexOfNotPrefixedBy(char[] str, int strOff, char[] subStr, int subStrOff, char[] prefix, int prefixOff) {
		int prefixLen = prefix.length - prefixOff;
		int index = indexOf(str, strOff, subStr, subStrOff);
		while(index > -1) {
			if(index-strOff >= prefixLen) {
				if(!StringCompare.equal(str, index - prefixLen, prefix, prefixOff, prefixLen)) {
					return index;
				}
			}
			else {
				return index;
			}
			index = indexOf(str, index + prefixLen, subStr, subStrOff);
		}
		return -1;
	}


	/** Search for a matching sub-string in an array characters from a list of possible sub-strings
	 * @param str the character array to search
	 * @param strOff the offset into the character array at which to start searching
	 * @param matchStrs the list of string to search for in {@code str}
	 * @return the index of the found sub-string, in the range {@code [0, matchStrs.size()-1]},
	 * or -1 if the sub-string could not be found
	 */
	public static int indexOfMatch(char[] str, int strOff, Iterable<String> matchStrs) {
		int matchStrIndex = -1;
		if(matchStrs instanceof RandomAccess && matchStrs instanceof List) {
			List<String> strList = (List<String>)matchStrs;
			for(int i = 0, size = strList.size(); i < size; i++) {
				if(StringIndex.indexOf(str, strOff, strList.get(i), 0) != -1) {
					matchStrIndex = i;
					break;
				}
			}
		}
		else {
			int i = 0;
			for(String matchStr : matchStrs) {
				if(StringIndex.indexOf(str, strOff, matchStr, 0) != -1) {
					matchStrIndex = i;
					break;
				}
				i++;
			}
		}
		return matchStrIndex;
	}


	/** Search for a sub-string in an array of characters from an array of possible sub-strings
	 * @param str the character array to search
	 * @param strOff the offset into the character array at which to start searching
	 * @param matchStrs the array of string to search for in {@code str}
	 * @return the index of the found sub-string, in the range {@code [0, matchStrs.size()-1]},
	 * or -1 if the sub-string could not be found
	 */
	public static int indexOfMatch(char[] str, int strOff, String[] matchStrs) {
		int matchStrIndex = -1;
		for(int i = 0, size = matchStrs.length; i < size; i++) {
			if(StringIndex.indexOf(str, strOff, matchStrs[i], 0) != -1) {
				matchStrIndex = i;
				break;
			}
		}
		return matchStrIndex;
	}


	/** Search for a matching sub-string in an array characters from a list of possible sub-strings
	 * @param str the character array to search
	 * @param strOff the offset into the character array at which to start searching
	 * @param matchStrs the list of string to search for in {@code str}
	 * @return the index of the found sub-string, in the range {@code [0, matchStrs.size()-1]},
	 * or -1 if the sub-string could not be found
	 */
	public static int indexOfMatchNotPrefixedBy(char[] str, int strOff, Iterable<String> matchStrs, char[] prefix, int prefixOff) {
		int matchStrIndex = -1;
		if(matchStrs instanceof RandomAccess && matchStrs instanceof List) {
			List<String> strList = (List<String>)matchStrs;
			for(int i = 0, size = strList.size(); i < size; i++) {
				if(StringIndex.indexOfNotPrefixedBy(str, strOff, strList.get(i), 0, prefix, prefixOff) != -1) {
					matchStrIndex = i;
					break;
				}
			}
		}
		else {
			int i = 0;
			for(String matchStr : matchStrs) {
				if(StringIndex.indexOfNotPrefixedBy(str, strOff, matchStr, 0, prefix, prefixOff) != -1) {
					matchStrIndex = i;
					break;
				}
				i++;
			}
		}
		return matchStrIndex;
	}


	/** Search for a sub string of characters in an array of characters and return the absolute index
	 * where the sub string begins, or -1 if the sub string does not exist in the main array
	 * @param str the char sequence to search
	 * @param strOff the offset into the character array at which to start searching
	 * @param subStr the sub string to search for in {@code str}
	 * @param subStrOff the offset into the sub string array at which to start searching
	 * @return the index of the found sub string, from index 0, or -1 if the sub string could not be found
	 */
	public static int indexOf(CharSequence str, int strOff, CharSequence subStr, int subStrOff, int len) {
		int subStrCount = len; // don't check for subStr bounds, let charAt() throw IOOBE
		// if the sub string has a length of zero, return the offset into the search string, no comparison needed
		if(subStrCount == 0) { return strOff; }

		char firstChar = subStr.charAt(subStrOff);
		int maxI = str.length();
		int maxK = subStrOff + subStrCount;

		for(int i = strOff; i < maxI; i++) {
			// search for the first matching character
			while(i < maxI && str.charAt(i) != firstChar) { i++; }

			if(i < maxI) {
				// j and k have + 1 because the first character was already matched by the previous loop
				int j = i + 1;
				for(int k = subStrOff + 1; k < maxK && j < maxI && str.charAt(j) == subStr.charAt(k); j++, k++) {
				}
				// if the entire substring was found
				if(j == i + subStrCount) {
					return j - subStrCount;
				}
			}
		}
		return -1;
	}


	/** Returns the list index of the string that starts with {@code startStr}
	 * @param strs the list of strings, the start of each is compared to {@code startStr}
	 * @param startStr the character sequence to compare to the start of each string in {@code strs}
	 * @param startStrOffset the offset into the start string's contents at which to start
	 * comparing characters to strings from {@code strs}
	 * @return the {@code str} index of the string that starts with the contents of {@code startStr},
	 * -1 if none of the strings start with {@code startStr}
	 */
	public static int startsWithIndex(List<String> strs, CharSequence startStr, int startStrOffset) {
		for(int i = 0, len = strs.size(); i < len; i++) {
			if(StringCompare.compareStartsWith(strs.get(i), startStr, startStrOffset) == 0) {
				return i;
			}
		}
		return -1;
	}

}

>>
